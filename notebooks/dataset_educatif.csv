question,reponse
"C'est quoi une variable en Python ?","Une variable est un nom qui sert d'étiquette pour stocker une valeur en mémoire. On la crée avec le signe égal (`=`). Par exemple : `age = 10` ou `nom = 'Alice'`."
"What is a variable in Python?","A variable is a name that acts as a label to store a value in memory. You create it with the equals sign (`=`). For example: `age = 10` or `name = 'Alice'`."
"Quels sont les types de données de base en Python ?","Les types de base les plus courants sont les **entiers** (`int`, ex: 10), les **flottants** (`float` pour les nombres à virgule, ex: 3.14), les **chaînes de caractères** (`str` pour le texte, ex: 'Bonjour'), et les **booléens** (`bool` pour Vrai/Faux, ex: True)."
"What are the basic data types in Python?","The most common basic types are **integers** (`int`, e.g., 10), **floats** (`float` for decimal numbers, e.g., 3.14), **strings** (`str` for text, e.g., 'Hello'), and **booleans** (`bool` for True/False, e.g., True)."
"Comment afficher du texte à l'écran ?","Utilise la fonction intégrée `print()`. Tout ce que tu mets entre les parenthèses sera affiché.\n```python\nprint('Bonjour, monde !')\n```"
"How do I print text to the screen?","Use the built-in `print()` function. Whatever you put inside the parentheses will be displayed.\n```python\nprint('Hello, world!')\n```"
"Quelle est la différence entre une liste et un tuple ?","C'est une question de mutabilité. Une **liste** (créée avec des crochets `[]`) est *mutable*, ce qui signifie que tu peux la modifier après sa création (ajouter ou supprimer des éléments). Un **tuple** (créé avec des parenthèses `()`) est *immutable*, tu ne peux pas le changer une fois créé. On utilise les tuples pour des données qui ne doivent pas changer."
"What is the difference between a list and a tuple?","It's about mutability. A **list** (made with square brackets `[]`) is *mutable*, meaning you can change it after it's created (add/remove items). A **tuple** (made with parentheses `()`) is *immutable*, meaning you cannot change it once it's created. Tuples are used for data that shouldn't change."
"Comment je trie une liste en Python ?","Tu as deux options principales :\n1.  La méthode `.sort()` modifie ta liste d'origine.\n2.  La fonction `sorted()` renvoie une *nouvelle* liste triée sans toucher à l'originale.\n```python\n# Option 1: .sort()\nma_liste = [3, 1, 2]\nma_liste.sort()\n# 'ma_liste' est maintenant [1, 2, 3]\n\n# Option 2: sorted()\nnouvelle_liste = sorted([3, 1, 2])\n# 'nouvelle_liste' est [1, 2, 3]\n```"
"How do I sort a list in Python?","You have two main options:\n1.  The `.sort()` method modifies your original list.\n2.  The `sorted()` function returns a *new* sorted list without touching the original.\n```python\n# Option 1: .sort()\nmy_list = [3, 1, 2]\nmy_list.sort()\n# 'my_list' is now [1, 2, 3]\n\n# Option 2: sorted()\nnew_list = sorted([3, 1, 2])\n# 'new_list' is [1, 2, 3]\n```"
"C'est quoi la différence entre `=` et `==` ?","C'est une différence très importante ! Le simple égal (`=`) est l'opérateur d'**assignation** ; il *donne* une valeur à une variable (ex: `x = 5`). Le double égal (`==`) est l'opérateur de **comparaison** ; il *vérifie* si deux valeurs sont égales (ex: `if x == 5:`)."
"What is the difference between `=` and `==`?","This is a very important difference! The single equals (`=`) is the **assignment** operator; it *gives* a value to a variable (e.g., `x = 5`). The double equals (`==`) is the **comparison** operator; it *checks* if two values are equal (e.g., `if x == 5:`)."
"Comment définir une fonction en Python ?","On utilise le mot-clé `def`, suivi du nom de la fonction, de parenthèses `()` et de deux-points `:`. Le code à l'intérieur de la fonction doit être indenté (décalé vers la droite).\n```python\ndef saluer(nom):\n    print(f'Bonjour, {nom}!')\n\n# On l'appelle comme ceci :\nsaluer('Alice')\n```"
"How do you define a function in Python?","You use the `def` keyword, followed by the function name, parentheses `()`, and a colon `:`. The code inside the function must be indented.\n```python\ndef greet(name):\n    print(f'Hello, {name}!')\n\n# You call it like this:\ngreet('Alice')\n```"
"C'est quoi une fonction lambda ?","Une fonction `lambda` (ou fonction anonyme) est une petite fonction d'une seule ligne. Elle peut avoir **plusieurs arguments**, mais ne peut contenir qu'**une seule expression** (l'action à effectuer). Elle est souvent utilisée pour des tâches rapides, comme le tri.\n```python\n# Fonction lambda qui ajoute deux nombres\najouter = lambda x, y: x + y\n\nprint(ajouter(5, 3)) # Affiche 8\n```"
"What is a lambda function?","A `lambda` function (or anonymous function) is a small, one-line function. It can have **multiple arguments**, but only **one expression** (the action to perform). It's often used for quick tasks, like sorting.\n```python\n# Lambda function that adds two numbers\nadd = lambda x, y: x + y\n\nprint(add(5, 3)) # Prints 8\n```"
"Comment gérer les erreurs en Python ?","On utilise un bloc `try...except`. Tu mets le code qui pourrait planter dans le bloc `try`, et le code à exécuter en cas d'erreur dans le bloc `except`.\n```python\ntry:\n    resultat = 10 / 0 # Provoque une erreur\nexcept ZeroDivisionError:\n    print('Erreur : Tu ne peux pas diviser par zéro !')\n```"
"How do I handle errors in Python?","You use a `try...except` block. You put the code that might crash in the `try` block, and the code to run if an error happens in the `except` block.\n```python\ntry:\n    result = 10 / 0 # Causes an error\nexcept ZeroDivisionError:\n    print('Error: You cannot divide by zero!')\n```"